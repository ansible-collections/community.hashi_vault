---
- name: Install Hashi Vault on controlled node and test
  block:

    - when: cryptography_version.stdout is version('1.6', '>=')
      block:
        - name: Generate privatekey
          community.crypto.openssl_privatekey:
            path: '{{ local_temp_dir }}/privatekey.pem'

        - name: Generate CSR
          community.crypto.openssl_csr:
            path: '{{ local_temp_dir }}/csr.csr'
            privatekey_path: '{{ local_temp_dir }}/privatekey.pem'
            subject:
              commonName: localhost

        - name: Generate selfsigned certificate
          community.crypto.openssl_certificate:
            path: '{{ local_temp_dir }}/cert.pem'
            csr_path: '{{ local_temp_dir }}/csr.csr'
            privatekey_path: '{{ local_temp_dir }}/privatekey.pem'
            provider: selfsigned
            selfsigned_digest: sha256
          register: selfsigned_certificate

    - name: "Check if vault binary exists"
      stat:
        path: '{{ vault_cmd }}'
        follow: yes
        get_attributes: no
        get_checksum: no
        get_mime: no
      register: bin_status

    - name: "Download vault if not local"
      when: not bin_status.stat.exists
      import_tasks: vault_download.yml

    - environment:
        # used by vault command
        VAULT_DEV_ROOT_TOKEN_ID: '47542cbc-6bf8-4fba-8eda-02e0a0d29a0a'
      block:
        - name: 'Create configuration file'
          template:
            src: vault_config.hcl.j2
            dest: '{{ local_temp_dir }}/vault_config.hcl'

        - name: 'Start vault service'
          environment:
            VAULT_ADDR: 'http://localhost:8200'
          block:
            - name: 'Start vault server (dev mode enabled)'
              shell: 'nohup {{ vault_cmd }} server -dev -config {{ local_temp_dir }}/vault_config.hcl </dev/null >/dev/null 2>&1 &'
              notify: test_managed_vault_cleanup

            - name: 'Create generic secrets engine'
              command: '{{ vault_cmd }} secrets enable -path=gen generic'

            - name: 'Create KV v1 secrets engine'
              command: '{{ vault_cmd }} secrets enable -path=kv1 -version=1 kv'

            - name: 'Create KV v2 secrets engine'
              command: '{{ vault_cmd }} secrets enable -path=kv2 -version=2 kv'

            - name: 'Create a test policy'
              command:
                cmd: '{{ vault_cmd }} policy write test-policy -'
                stdin: |
                  path "{{ vault_gen_path }}/secret1" {
                    capabilities = ["read"]
                  }
                  path "{{ vault_gen_path }}/secret2" {
                    capabilities = ["read", "update"]
                  }
                  path "{{ vault_gen_path }}/secret3" {
                    capabilities = ["deny"]
                  }
                  path "{{ vault_kv1_path }}/secret1" {
                    capabilities = ["read"]
                  }
                  path "{{ vault_kv1_path }}/secret2" {
                    capabilities = ["read", "update"]
                  }
                  path "{{ vault_kv1_path }}/secret3" {
                    capabilities = ["deny"]
                  }
                  path "{{ vault_kv2_path }}/secret1" {
                    capabilities = ["read"]
                  }
                  path "{{ vault_kv2_path }}/secret2" {
                    capabilities = ["read", "update"]
                  }
                  path "{{ vault_kv2_path }}/secret3" {
                    capabilities = ["deny"]
                  }
                  path "{{ vault_kv2_multi_path }}/secrets" {
                    capabilities = ["read"]
                  }
                  path "{{ vault_kv2_path }}/secret4" {
                    capabilities = ["read", "update"]
                  }

            - name: 'Create generic secrets'
              command: '{{ vault_cmd }} write {{ vault_gen_path }}/secret{{ item }} value=foo{{ item }}'
              loop: [1, 2, 3]

            - name: 'Create KV v1 secrets'
              command: '{{ vault_cmd }} kv put {{ vault_kv1_path }}/secret{{ item }} value=foo{{ item }}'
              loop: [1, 2, 3]

            - name: 'Create KV v2 secrets'
              command: '{{ vault_cmd }} kv put {{ vault_kv2_path | regex_replace("/data") }}/secret{{ item }} value=foo{{ item }}'
              loop: [1, 2, 3, 4]

            - name: 'Update KV v2 secret4 with new value to create version'
              command: '{{ vault_cmd }} kv put {{ vault_kv2_path | regex_replace("/data") }}/secret4 value=foo5'

            - name: 'Create multiple KV v2 secrets under one path'
              command: '{{ vault_cmd }} kv put {{ vault_kv2_multi_path | regex_replace("/data") }}/secrets value1=foo1 value2=foo2 value3=foo3'

            - name: setup approle auth
              import_tasks: approle_setup.yml
              when: ansible_distribution != 'RedHat' or ansible_distribution_major_version is version('7', '>')

            - name: setup approle secret_id_less auth
              import_tasks: approle_secret_id_less_setup.yml
              when: ansible_distribution != 'RedHat' or ansible_distribution_major_version is version('7', '>')

            - name: setup token auth
              import_tasks: token_setup.yml

            - name: setup jwt auth
              import_tasks: jwt_setup.yml
              when: ansible_distribution != 'RedHat' or ansible_distribution_major_version is version('7', '>')
