---
- name: "Ensure output dirs exist"
  file:
    state: directory
    path: '{{ item }}'
  loop:
    - '{{ docker_compose_output }}'
    - '{{ vault_config_output }}'

- name: "Create the docker-compose definition"
  template:
    src: docker-compose.yml.j2
    dest: '{{ docker_compose_file }}'

- name: "Persist vars (role_path is relative)"
  set_fact:
    vault_cert_file: '{{ vault_cert_file }}'
    vault_key_file: '{{ vault_key_file }}'

- name: "Check if cert already exists"
  stat:
    path: '{{ vault_cert_file }}'
    follow: yes
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: cert_status

- name: "Check if key already exists"
  stat:
    path: '{{ vault_key_file }}'
    follow: yes
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: key_status

- name: "Generate certs"
  when: >-
    vault_crypto_force | bool
    or not (key_status.stat.exists and cert_status.stat.exists)
  include_role:
    name: setup_vault_server_cert
  vars:
    vault_dns_names: '{{ [vault_target_name, vault_container_name] | unique }}'

- name: "Template vault config"
  template:
    src: vault_config.hcl.j2
    dest: '{{ vault_config_output }}/vault_config.hcl'

- include_tasks: docker.yml
  when: docker_compose != 'none'

- name: "Template integration_config"
  template:
    src: integration_config.yml.j2
    dest: '{{ output_dir }}/integration_config.yml'
    force: yes
