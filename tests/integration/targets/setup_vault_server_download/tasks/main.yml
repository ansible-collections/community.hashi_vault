---
- name: "Check if vault binary exists"
  stat:
    path: '{{ vault_cmd }}'
    follow: yes
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: bin_status

- name: "Download vault if not local"
  when: not bin_status.stat.exists or vault_server_download_force | bool
  block:
    - name: "Create bin directory"
      file:
        path: '{{ vault_bin }}'
        state: directory

    - name: 'Download vault binary'
      get_url:
        url: '{{ vault_uri }}'
        dest: '{{ vault_zip }}'

    - block:
        # because installing unzip is so slow, even when it already exists, we're going to ask for
        # forgiveness rather than permission, and try to unzip first. If it fails, then we'll try to
        # install it and extract again.
        - name: 'Extract vault binary'
          unarchive:
            src: '{{ vault_zip }}'
            dest: '{{ vault_bin }}'
            remote_src: yes
            creates: '{{ vault_cmd }}'
      rescue:
        # NOTE: 'package' does not work properly with Ubuntu/Debian (like the 'default' docker image),
        #       if you're running in a version of Python other than the "system" Python, due to system libraries
        #       needed for the python 'apt' package. See https://stackoverflow.com/q/13708180/3905079
        #       So for those OSes, we'll set the Python interpreter to the symlink in /usr/bin which should
        #       always be the correct one that corresponds to the system libraries.
        #
        #       All this just for unzip, which is only needed to unzip the vault binary to set up for testing.
        - name: 'Install unzip'
          become: yes
          vars:
            # by assuming python3 here we're probably condeming this to not work on older Ubuntu/Debian (from like 2014?)
            # but the alternative is probably reimplementing parts of interpreter_discovery.py
            ansible_python_interpreter: "{{
              '/usr/bin/python3' if ansible_distribution in ['Ubuntu', 'Debian'] else ansible_python.executable
            }}"
          package:
            name: unzip
          when: ansible_distribution != "MacOSX"  # unzip already installed

        - name: 'Extract vault binary'
          unarchive:
            src: '{{ vault_zip }}'
            dest: '{{ vault_bin }}'
            remote_src: yes
            creates: '{{ vault_cmd }}'

- name: 'Export Vault command'
  set_fact:
    vault_cmd: '{{ vault_cmd }}'
