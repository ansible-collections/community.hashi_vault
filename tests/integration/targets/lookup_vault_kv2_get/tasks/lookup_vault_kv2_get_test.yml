---
- name: Var block
  vars:
    ansible_hashi_vault_token_validate: true
    user_token: '{{ user_token_cmd.result.auth.client_token }}'
    kwargs:
      url: '{{ vault_test_server_http }}'
      auth_method: token
      token: '{{ user_token }}'
      engine_mount_point: '{{ vault_kv2_mount_point }}'
  block:
    - name: Check kv2 secret read
      vars:
        kv2_result: "{{ lookup('community.hashi_vault.vault_kv2_get', vault_kv2_path ~ '/secret2', **kwargs) }}"
      assert:
        that: &assert_basics
          - "'raw' in kv2_result"
          - "'data' in kv2_result"
          - "'metadata' in kv2_result"
          - "'secret' in kv2_result"
          - "'data' in kv2_result['raw']"
          - kv2_result['data'] == kv2_result['raw']['data']
          - kv2_result['secret'] == kv2_result['data']['data']
          - kv2_result['metadata'] == kv2_result['data']['metadata']
        fail_msg: 'Return value did not contain expected fields.'

    - name: Check kv2 versioned (latest)
      set_fact:
        kv2_result: "{{ lookup('community.hashi_vault.vault_kv2_get', vault_kv2_versioned_path ~ '/twover', **kwargs) }}"

    - assert:
        that: *assert_basics

    - name: Check version-specific expected values (latest)
      vars: &expected_ver2
        expected:
          version: 2
          a: two
          v: 2
      assert:
        that: &assert_expected
          - kv2_result.metadata.version == expected.version
          - kv2_result.secret.a == expected.a
          - kv2_result.secret.v == expected.v

    - name: Check kv2 versioned (2)
      set_fact:
        kv2_result: "{{ lookup('community.hashi_vault.vault_kv2_get', vault_kv2_versioned_path ~ '/twover', version=2, **kwargs) }}"

    - assert:
        that: *assert_basics

    - name: Check version-specific expected values (2)
      vars: *expected_ver2
      assert:
        that: *assert_expected

    - name: Check kv2 versioned (1)
      set_fact:
        kv2_result: "{{ lookup('community.hashi_vault.vault_kv2_get', vault_kv2_versioned_path ~ '/twover', version=1, **kwargs) }}"

    - assert:
        that: *assert_basics

    - name: Check version-specific expected values (1)
      vars:
        expected:
          version: 1
          a: one
          v: 1
      assert:
        that: *assert_expected

    - name: Check multiple path read as array
      vars:
        paths:
          - '{{ vault_kv2_path }}/secret2'
          - '{{ vault_kv2_path }}/secret1'
        kv2_secrets: "{{ lookup('community.hashi_vault.vault_kv2_get', *paths, **kwargs) }}"
      assert:
        that:
          - kv2_secrets | type_debug == 'list'
          - item | type_debug == 'dict'
          - "'raw' in item"
          - "'data' in item"
          - "'metadata' in item"
          - "'secret' in item"
          - "'data' in item['raw']"
          - item['data'] == item['raw']['data']
          - item['secret'] == item['data']['data']
          - item['metadata'] == item['data']['metadata']
        fail_msg: 'Return value was not correct type or items do not match.'
      loop: '{{ kv2_secrets }}'


    ### failure tests

    - name: Test defualt path value
      vars:
        default_path_access: "{{ lookup('community.hashi_vault.vault_kv2_get', vault_kv2_path ~ '/secret2', url=kwargs.url, token=kwargs.token) }}"
      debug:
        msg: 'Failure is expected ({{ default_path_access }})'
      register: default_path
      ignore_errors: true

    - assert:
        that:
          - default_path is failed
          - default_path.msg is search('Permission Denied to path')

    - name: Failure expected when erroneous credentials are used
      vars:
        secret_wrong_cred: "{{ lookup('community.hashi_vault.vault_kv2_get', vault_kv2_path ~ '/secret2', token='wrong_token', url=kwargs.url) }}"
      debug:
        msg: 'Failure is expected ({{ secret_wrong_cred }})'
      register: test_wrong_cred
      ignore_errors: true

    - assert:
        that:
          - test_wrong_cred is failed
          - test_wrong_cred.msg is search('Invalid Vault Token')
        fail_msg: "Expected failure but got success or wrong failure message."

    - name: Failure expected when unauthorized secret is read
      vars:
        secret_unauthorized: "{{ lookup('community.hashi_vault.vault_kv2_get', vault_kv2_path ~ '/secret3', **kwargs) }}"
      debug:
        msg: 'Failure is expected ({{ secret_unauthorized }})'
      register: test_unauthorized
      ignore_errors: true

    - assert:
        that:
          - test_unauthorized is failed
          - test_unauthorized.msg is search('Permission Denied')
        fail_msg: "Expected failure but got success or wrong failure message."

    - name: Failure expected when inexistent secret is read
      vars:
        secret_inexistent: "{{ lookup('community.hashi_vault.vault_kv2_get', vault_kv2_path ~ '/non_existent_secret', **kwargs) }}"
      debug:
        msg: 'Failure is expected ({{ secret_inexistent }})'
      register: test_inexistent
      ignore_errors: true

    - assert:
        that:
          - test_inexistent is failed
          - test_inexistent.msg is search("missing path")
        fail_msg: "Expected failure but got success or wrong failure message."


    # do this last so our set_fact doesn't affect any other tests
    - name: Set the vars that will configure the lookup settings we can't set via with_
      set_fact:
        ansible_hashi_vault_url: '{{ kwargs.url }}'
        ansible_hashi_vault_token: '{{ kwargs.token }}'
        ansible_hashi_vault_auth_method: '{{ kwargs.auth_method }}'
        ansible_hashi_vault_engine_mount_point: '{{ kwargs.engine_mount_point }}'

    - name: Check multiple path read via with_
      assert:
        that:
          - item | type_debug == 'dict'
          - "'raw' in item"
          - "'data' in item"
          - "'metadata' in item"
          - "'secret' in item"
          - "'data' in item['raw']"
          - item['data'] == item['raw']['data']
          - item['secret'] == item['data']['data']
          - item['metadata'] == item['data']['metadata']
        fail_msg: 'Return value was not correct type or items do not match.'
      with_community.hashi_vault.vault_kv2_get:
        - '{{ vault_kv2_path }}/secret2'
        - '{{ vault_kv2_path }}/secret1'
