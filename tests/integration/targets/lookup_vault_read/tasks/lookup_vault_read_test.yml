---
- name: Var block
  vars:
    user_token: '{{ user_token_cmd.result.auth.client_token }}'
    kwargs:
      url: '{{ vault_test_server_http }}'
      auth_method: token
      token: '{{ user_token }}'
  block:
    - name: 'Check kv2 secret read'
      vars:
        kv2_secret2: "{{ lookup('community.hashi_vault.vault_read', vault_kv2_api_path ~ '/secret2', **kwargs) }}"
      assert:
        that:
          - "'data' in kv2_secret2"
          - "'data' in kv2_secret2['data']"
          - "'metadata' in kv2_secret2['data']"
        fail_msg: 'Return value did not contain expected fields.'

    - name: "Check multiple path read as array"
      vars:
        paths:
          - '{{ vault_kv2_api_path }}/secret2'
          - '{{ vault_kv2_api_path }}/secret1'
        kv2_secrets: "{{ lookup('community.hashi_vault.vault_read', *paths, **kwargs) }}"
      assert:
        that:
          - kv2_secrets | type_debug == 'list'
          - item | type_debug == 'dict'
          - "'data' in item"
          - "'data' in item['data']"
          - "'value' in item['data']['data']"
        fail_msg: 'Return value was not correct type or items do not match.'
      loop: '{{ kv2_secrets }}'


    ### failure tests

    - name: 'Failure expected when erroneous credentials are used'
      vars:
        secret_wrong_cred: "{{ lookup('community.hashi_vault.vault_read', vault_kv2_api_path ~ '/secret2', token='wrong_token', url=kwargs.url) }}"
      debug:
        msg: 'Failure is expected ({{ secret_wrong_cred }})'
      register: test_wrong_cred
      ignore_errors: true

    - assert:
        that:
          - test_wrong_cred is failed
          - test_wrong_cred.msg is search('Invalid Vault Token')
        fail_msg: "Expected failure but got success or wrong failure message."

    - name: 'Failure expected when unauthorized secret is read'
      vars:
        secret_unauthorized: "{{ lookup('community.hashi_vault.vault_read', vault_kv2_api_path ~ '/secret3', **kwargs) }}"
      debug:
        msg: 'Failure is expected ({{ secret_unauthorized }})'
      register: test_unauthorized
      ignore_errors: true

    - assert:
        that:
          - test_unauthorized is failed
          - test_unauthorized.msg is search('Permission Denied')
        fail_msg: "Expected failure but got success or wrong failure message."

    - name: 'Failure expected when inexistent secret is read'
      vars:
        secret_inexistent: "{{ lookup('community.hashi_vault.vault_read', vault_kv2_api_path ~ '/non_existent_secret', **kwargs) }}"
      debug:
        msg: 'Failure is expected ({{ secret_inexistent }})'
      register: test_inexistent
      ignore_errors: true

    - assert:
        that:
          - test_inexistent is failed
          - test_inexistent.msg is search("doesn't seem to exist")
        fail_msg: "Expected failure but got success or wrong failure message."

    # do this last so our set_fact doesn't affect any other tests
    - name: Set the vars that will configure the lookup settings we can't set via with_
      set_fact:
        ansible_hashi_vault_url: '{{ kwargs.url }}'
        ansible_hashi_vault_token: '{{ kwargs.token }}'
        ansible_hashi_vault_auth_method: '{{ kwargs.auth_method }}'

    - name: Check multiple path read via with_
      assert:
        that:
          - item | type_debug == 'dict'
          - "'data' in item"
          - "'data' in item['data']"
          - "'value' in item['data']['data']"
        fail_msg: 'Return value was not correct type or items do not match.'
      with_community.hashi_vault.vault_read:
        - '{{ vault_kv2_api_path }}/secret2'
        - '{{ vault_kv2_api_path }}/secret1'
