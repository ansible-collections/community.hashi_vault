- name: Test token with no default policy (missing lookup-self)
  vars:
    user_token: '{{ user_token_no_default_policy_cmd.result.auth.client_token }}'
    secret: "{{ vault_kv2_api_path ~ '/secret1' }}"
    expected_secret_value: foo1
    # ansible_hashi_vault_auth_method: token
  block:
    # task vars are not templated when used as vars, so we'll need to set_fact this evaluate the template
    # see: https://github.com/ansible/ansible/issues/73268
    - set_fact:
        ansible_hashi_vault_token: '{{ user_token }}'

    - name: Authenticate with a 'no default policy' token (failure expected)
      # vars:
      #   ansible_hashi_vault_token_validate: true
      # This will fail when the default changes in 4.0.0. Uncomment above.
      # https://github.com/ansible-collections/community.hashi_vault/issues/248
      set_fact:
        response: "{{ lookup('vault_test_auth', want_exception=true) }}"

    - assert:
        that:
          - response is failed
          - response.msg is search('Invalid Vault Token')

    - name: Authenticate with 'no default policy' token - with no validation
      vars:
        ansible_hashi_vault_token_validate: false
      # After 4.0.0, let's let this one use the default value and unset the above.
      # https://github.com/ansible-collections/community.hashi_vault/issues/248
      set_fact:
        response: "{{ lookup('vault_test_auth') }}"

    - assert:
        that: response.login.auth.client_token == user_token

    # if we could lookup-self, we'd be able to inspect the policies on this token,
    # but since we can't, let's use the token to retrieve a secret we expect it to have access to.
    # TODO: consider that we can use the root token we have access to in CI to lookup this token.
    - name: Check that the token is usable
      delegate_to: localhost
      vault_ci_read:
        url: '{{ ansible_hashi_vault_url }}'
        token: '{{ response.login.auth.client_token }}'
        path: '{{ secret }}'
      register: secret_data

    - assert:
        that: secret_data.result.data.data.value == expected_secret_value

    - name: Authenticate with an invalid token - with no validation
      set_fact:
        response: "{{ lookup('vault_test_auth', token='fake', token_validate=false) }}"

    - assert:
        that: response.login.auth.client_token == 'fake'

    - name: Try to use the invalid token
      delegate_to: localhost
      vault_ci_read:
        url: '{{ ansible_hashi_vault_url }}'
        token: '{{ response.login.auth.client_token }}'
        path: '{{ secret }}'
      register: secret_data
      ignore_errors: yes

    - assert:
        that:
          - secret_data is failed
          - secret_data.msg is search('permission denied')

- name: Normal token tests
  vars:
    user_token: '{{ user_token_cmd.result.auth.client_token }}'
    expected_policy: test-policy
  block:
    - name: Authenticate with a token
      set_fact:
        response: "{{ lookup('vault_test_auth', token=user_token) }}"

    - assert:
        that:
          - response.login.auth.client_token == user_token
          - expected_policy in response.login.data.policies
          - expected_policy in response.login.auth.policies

    - name: Authenticate with an invalid token
      set_fact:
        response: "{{ lookup('vault_test_auth', token='fake', want_exception=true) }}"

    - assert:
        that:
          - response is failed
          - response.msg is search('Invalid Vault Token')
