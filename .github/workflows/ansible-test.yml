# README FIRST
# 1. If you don't have unit tests remove that section
# 2. If your collection depends on other collections ensure they are installed, see "Install collection dependencies"
# If you need help please ask in the #ansible-community channel on Libera.Chat IRC (https://libera.chat/)
# Refer to https://libera.chat/guides/registration to learn how to register

name: CI
on:
  # Run CI against all pushes (direct commits, also merged PRs), Pull Requests
  push:
    paths-ignore:
      - 'docs/**'
  pull_request:
    paths-ignore:
      - 'docs/**'
  schedule:
    - cron: '0 14 * * *'
env:
  NAMESPACE: community
  COLLECTION_NAME: hashi_vault
  ANSIBLE_FORCE_COLOR: true

jobs:

###
# Sanity tests (REQUIRED)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_sanity.html

  sanity:
    name: Sanity (Ⓐ${{ matrix.ansible }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner:
          - ubuntu-latest
        test_container:
          - default
        ansible:
          - stable-2.9
          - stable-2.10
          - stable-2.11
          - devel
    steps:

      # ansible-test requires the collection to be in a directory in the form
      # .../ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}/

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          # it is just required to run that once as "ansible-test sanity" in the docker image
          # will run on all python versions it supports.
          python-version: 3.8

      # Install the head of the given branch (devel, stable-2.10)
      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      # run ansible-test sanity inside of Docker.
      # The docker container has all the pinned dependencies that are required
      # and all python versions ansible supports.
      - name: Run sanity tests
        run: ansible-test sanity --docker ${{ matrix.test_container }} -v --color
        working-directory: ./ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

  units:
    runs-on: ${{ matrix.runner }}
    name: Units (Ⓐ${{ matrix.ansible }})
    strategy:
      # As soon as the first unit test fails, cancel the others to free up the CI queue
      fail-fast: true
      matrix:
        runner:
          - ubuntu-latest
        test_container:
          - default
        ansible:
          - stable-2.9
          - stable-2.10
          - stable-2.11
          - devel

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          # it is just required to run that once as "ansible-test units" in the docker image
          # will run on all python versions it supports.
          python-version: 3.8

      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      # # OPTIONAL If your unit test requires Python libraries from other collections
      # # Install them like this
      # - name: Install collection dependencies
      #   run: ansible-galaxy collection install ansible.netcommon ansible.utils -p .

      # Run the unit tests
      - name: Run unit test
        run: ansible-test units -v --color --docker ${{ matrix.test_container }} --coverage
        working-directory: ./ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

        # ansible-test support producing code coverage date
      - name: Generate coverage report
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
        working-directory: ./ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

      # See the reports at https://codecov.io/gh/ansible-collections/community.hashi_vault
      - uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: false

###
# Integration tests (RECOMMENDED)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_integration.html


# If the application you are testing is available as a docker container and you want to test
# multiple versions see the following for an example:
# https://github.com/ansible-collections/community.zabbix/tree/master/.github/workflows

  integration:
    runs-on: ${{ matrix.runner }}
    name: I (Ⓐ${{ matrix.ansible }}+py${{ matrix.python }} | Vault ${{ matrix.vault }})
    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-latest
        test_container:
          - default
        ansible:
          - stable-2.9
          - stable-2.10
          - stable-2.11
          - devel
        python:
          - 2.7
          - 3.5
          - 3.6
          - 3.7
          - 3.8
          - 3.9
        vault:
          # - 1.7.3
          - 1.6.5
        exclude:
          - ansible: stable-2.9
            python: 3.9
        include:
          - ansible: devel
            vault: 1.7.3
            python: '3.10'
            runner: ubuntu-latest
            test_container: default
    # services:
    #   vault:
    #     image: vault:${{ matrix.vault }}
    #     volumes:
    #       - ${{ github.workspace }}/ansible_collections/community/hashi_vault/tests/integration/targets/setup_localenv_gha/files/.output/vault_config:/vault/config
    #     env:
    #       VAULT_DEV_ROOT_TOKEN_ID: '47542cbc-6bf8-4fba-8eda-02e0a0d29a0a'
    #       SKIP_CHOWN: 1
    #   tinyproxy:
    #     image: monokal/tinyproxy

    steps:
      - name: Initialize env vars
        uses: briantist/ezenv@v1
        with:
          env: |
            COLLECTION_PATH=ansible_collections/${NAMESPACE}/${COLLECTION_NAME}
            COLLECTION_INTEGRATION_PATH=${COLLECTION_PATH}/tests/integration
            COLLECTION_INTEGRATION_TARGETS=${COLLECTION_INTEGRATION_PATH}/targets
            LOOKUP_HASHI_VAULT_PATH=${COLLECTION_INTEGRATION_TARGETS}/lookup_hashi_vault
            LOOKUP_HASHI_VAULT_BIN=${LOOKUP_HASHI_VAULT_PATH}/lookup_hashi_vault/files/bin
            LOOKUP_HASHI_VAULT_VARS=${LOOKUP_HASHI_VAULT_PATH}/lookup_hashi_vault/vars

        # run: |
        #   COLLECTION_PATH=ansible_collections/${NAMESPACE}/${COLLECTION_NAME}
        #   # COLLECTION_INTEGRATION_TARGETS=${COLLECTION_PATH}/tests/integration/targets
        #   # LOOKUP_HASHI_VAULT_PATH=${COLLECTION_INTEGRATION_TARGETS}/lookup_hashi_vault
        #   # LOOKUP_HASHI_VAULT_BIN=${LOOKUP_HASHI_VAULT_PATH}/lookup_hashi_vault/files/bin
        #   # LOOKUP_HASHI_VAULT_VARS=${LOOKUP_HASHI_VAULT_PATH}/lookup_hashi_vault/vars

        #   echo "COLLECTION_PATH=${COLLECTION_PATH}" >> ${GITHUB_ENV}
        #   # echo "COLLECTION_INTEGRATION_TARGETS=${COLLECTION_INTEGRATION_TARGETS}" >> ${GITHUB_ENV}
        #   # echo "LOOKUP_HASHI_VAULT_PATH=${LOOKUP_HASHI_VAULT_PATH}" >> ${GITHUB_ENV}
        #   # echo "LOOKUP_HASHI_VAULT_BIN=${LOOKUP_HASHI_VAULT_BIN}" >> ${GITHUB_ENV}
        #   # echo "LOOKUP_HASHI_VAULT_VARS=${LOOKUP_HASHI_VAULT_VARS}" >> ${GITHUB_ENV}

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ${{ env.COLLECTION_PATH }}

      - name: Linkit
        run: ln -s "${COLLECTION_PATH}/.github" .github

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      # - name: Cache for vault binaries
      #   id: cache-vault
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ env.LOOKUP_HASHI_VAULT_BIN }}
      #     key: ${{ runner.os }}-vault${{ matrix.vault }} # future: include version/arch when configurable

      # # removing .gitignore lets the files in those dirs be sent to the container via ansible-test
      # # the files/bin dir will contain the vault binary downloaded a few steps later (or retrieved from cache)
      # # the vars/ dir will be used to write a file overriding role defaults (for Vault version)
      # - name: Prepare for Vault version and caching
      #   run: |
      #     rm -f "${LOOKUP_HASHI_VAULT_BIN}/.gitignore"
      #     rm -f "${LOOKUP_HASHI_VAULT_VARS}/.gitignore"
      #     echo '{ "vault_version": "${{ matrix.vault }}" }' > "${LOOKUP_HASHI_VAULT_VARS}/main.json"

      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      # #TODO: remove dependency on community.crypto
      # - name: Find the latest version of community.crypto & community.docker
      #   run: |
      #     # credit to https://gist.github.com/lukechilds/a83e1d7127b78fef38c2914c4ececc3c#gistcomment-3294173

      #     cclu=$(curl -fs -o/dev/null -w %{redirect_url} https://github.com/ansible-collections/community.crypto/releases/latest)
      #     echo "CC_LATEST=$(basename ${cclu})" >> $GITHUB_ENV

      #     cdlu=$(curl -fs -o/dev/null -w %{redirect_url} https://github.com/ansible-collections/community.docker/releases/latest)
      #     echo "CD_LATEST=$(basename ${cdlu})" >> $GITHUB_ENV

      # - name: Cache for community.crypto
      #   id: cache-cc
      #   uses: actions/cache@v2
      #   with:
      #     path: ansible_collections/community/crypto
      #     key: collection-community.crypto-${{ env.CC_LATEST }}

      # - name: Cache for community.docker
      #   id: cache-cd
      #   uses: actions/cache@v2
      #   with:
      #     path: ansible_collections/community/docker
      #     key: collection-community.docker-${{ env.CD_LATEST }}

      # - name: Install community.crypto
      #   if: steps.cache-cc.outputs.cache-hit != 'true'
      #   uses: actions/checkout@v2
      #   with:
      #     repository: ansible-collections/community.crypto
      #     ref: refs/tags/${{ env.CC_LATEST }}
      #     path: ansible_collections/community/crypto

      # - name: Install community.docker
      #   if: steps.cache-cd.outputs.cache-hit != 'true'
      #   uses: actions/checkout@v2
      #   with:
      #     repository: ansible-collections/community.docker
      #     ref: refs/tags/${{ env.CD_LATEST }}
      #     path: ansible_collections/community/docker

      # this will populate files/bin with the selected vault version binary
      # - name: Pre-download Vault
      #   if: steps.cache-vault.outputs.cache-hit != 'true'
      #   env:
      #     ANSIBLE_ROLES_PATH: ../
      #   working-directory: ${{ env.LOOKUP_HASHI_VAULT_PATH }}/playbooks
      #   run: ansible-playbook "download_vault.yml" -v

      # Run the integration tests
        # env:
          # ANSIBLE_ROLES_PATH: ${{ env.COLLECTION_INTEGRATION_TARGETS }}
          # ANSIBLE_COLLECTIONS_PATHS: ${{ github.workspace }}
      - name: Prepare docker dependencies
        run: |
          pwd
          ./setup.sh
        working-directory: ${{ env.COLLECTION_INTEGRATION_TARGETS }}/setup_localenv_gha

          # pip install -r "${COLLECTION_INTEGRATION_TARGETS}/setup_localenv_docker/files/requirements/requirements.txt" -c "${COLLECTION_INTEGRATION_TARGETS}/setup_localenv_docker/files/requirements/constraints.txt"
          # ansible localhost -m include_role -a "name=setup_localenv_docker" -e vault_version=${{ matrix.vault }}
          # ansible localhost -m include_role -a "name=setup_localenv_gha" -e vault_version=${{ matrix.vault }}
          # cp "${COLLECTION_INTEGRATION_TARGETS}/setup_localenv_docker/files/.output/integration_config.yml" "${COLLECTION_INTEGRATION_PATH}"
          # cp "${COLLECTION_INTEGRATION_TARGETS}/setup_localenv_gha/files/.output/integration_config.yml" "${COLLECTION_INTEGRATION_PATH}"
          #"${COLLECTION_INTEGRATION_TARGETS}/setup_localenv_gha/files/.output/launch.sh"

      - name: Run integration test
        run: |
          ansible-test integration -v --color --retry-on-error --continue-on-error --python ${{ matrix.python }} --docker ${{ matrix.test_container }} --coverage --docker-network hashi_vault_default
        working-directory: ${{ env.COLLECTION_PATH }}

        # ansible-test support producing code coverage date
      - name: Generate coverage report
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
        working-directory: ${{ env.COLLECTION_PATH }}

      # See the reports at https://codecov.io/gh/ansible-collections/community.hashi_vault
      - uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: false

  local_test_invocation:
    runs-on: ${{ matrix.runner }}
    name: Local I - ${{ matrix.runner }} (Ⓐ${{ matrix.ansible }}+py${{ matrix.python }})
    env:
      # needed to prevent Ansible crashing on MacOS
      OBJC_DISABLE_INITIALIZE_FORK_SAFETY: 'YES'
    strategy:
      fail-fast: false
      matrix:
        ansible:
          - stable-2.11
        python:
          - 3.8
        runner:
          - ubuntu-latest
          - macos-latest
        test_container:
          - ubuntu1804
        # vault:
        #   - 1.7.3
        # exclude:
        #   - ansible: stable-2.9
        #     python: 3.9
        # include:
        #   - ansible: devel
        #     vault: 1.7.3
        #     python: '3.10'

    steps:
      - name: Initialize env vars
        uses: briantist/ezenv@v1
        with:
          env: |
            COLLECTION_PATH=ansible_collections/${NAMESPACE}/${COLLECTION_NAME}
            COLLECTION_INTEGRATION_PATH=${COLLECTION_PATH}/tests/integration
            COLLECTION_INTEGRATION_TARGETS=${COLLECTION_INTEGRATION_PATH}/targets
            LOOKUP_HASHI_VAULT_PATH=${COLLECTION_INTEGRATION_TARGETS}/lookup_hashi_vault
            LOOKUP_HASHI_VAULT_BIN=${LOOKUP_HASHI_VAULT_PATH}/lookup_hashi_vault/files/bin
            LOOKUP_HASHI_VAULT_VARS=${LOOKUP_HASHI_VAULT_PATH}/lookup_hashi_vault/vars

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ${{ env.COLLECTION_PATH }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      # - name: Fix forks/maxfiles on MacOS
      #   if: ${{ matrix.runner == 'macos-latest' }}
      #   env:
      #     PLIST: /Library/LaunchDaemons/limit.maxfiles.plist
      #     MAXFILES: 524288
      #   run: |
      #     ulimit -n
      #     ulimit -Hn
      #     ulimit -Sn

      #     sudo launchctl limit maxfiles $MAXFILES $MAXFILES

      #     ulimit -n
      #     ulimit -Hn
      #     ulimit -Sn

      #     ulimit -S -n $MAXFILES $MAXFILES

      #     # cat >${PLIST} <<EOF
      #     # <?xml version="1.0" encoding="UTF-8"?>
      #     # <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
      #     #         "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      #     # <plist version="1.0">
      #     # <dict>
      #     #     <key>Label</key>
      #     #     <string>limit.maxfiles</string>
      #     #     <key>ProgramArguments</key>
      #     #     <array>
      #     #     <string>launchctl</string>
      #     #     <string>limit</string>
      #     #     <string>maxfiles</string>
      #     #     <string>524288</string>
      #     #     <string>524288</string>
      #     #     </array>
      #     #     <key>RunAtLoad</key>
      #     #     <true/>
      #     #     <key>ServiceIPC</key>
      #     #     <false/>
      #     # </dict>
      #     # </plist>
      #     # EOF

      #     # sudo chmod 644 ${PLIST}

      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      #TODO: remove dependency on community.crypto
      - name: Find the latest version of community.crypto
        run: |
          # credit to https://gist.github.com/lukechilds/a83e1d7127b78fef38c2914c4ececc3c#gistcomment-3294173

          cclu=$(curl -fs -o/dev/null -w %{redirect_url} https://github.com/ansible-collections/community.crypto/releases/latest)
          echo "CC_LATEST=$(basename ${cclu})" >> $GITHUB_ENV

          cglu=$(curl -fs -o/dev/null -w %{redirect_url} https://github.com/ansible-collections/community.general/releases/latest)
          echo "CG_LATEST=$(basename ${cglu})" >> $GITHUB_ENV

      - name: Cache for community.crypto
        id: cache-cc
        uses: actions/cache@v2
        with:
          path: ansible_collections/community/crypto
          key: collection-community.crypto-${{ env.CC_LATEST }}

      - name: Install collection dependencies
        if: steps.cache-cc.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: ansible-collections/community.crypto
          ref: refs/tags/${{ env.CC_LATEST }}
          path: ansible_collections/community/crypto

      - name: Install collection dependencies
        # if: steps.cache-cc.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: ansible-collections/community.general
          ref: refs/tags/${{ env.CG_LATEST }}
          path: ansible_collections/community/general

      - name: Use Sample integration_config
        working-directory: ${COLLECTION_INTEGRATION_PATH}
        run: |
          pwd
          cp "integration_config.yml.sample" "integration_config.yml"

      - name: Run the integration tests in a venv
        run: |
          # ulimit -S -n $(ulimit -Hn)
          ansible-test integration -v --color --retry-on-error --continue-on-error --python ${{ matrix.python }} --local --requirements --allow-destructive --coverage
        working-directory: ${{ env.COLLECTION_PATH }}

      - name: Install Docker on MacOS
        if: ${{ matrix.runner == 'macos-latest' }}
        run: |
          mkdir -p ~/.docker/machine/cache
          curl -Lo ~/.docker/machine/cache/boot2docker.iso https://github.com/boot2docker/boot2docker/releases/download/v19.03.12/boot2docker.iso
          brew install docker-machine docker
          sudo docker --version
          docker-machine create --driver virtualbox default
          docker-machine env default
          docker-machine env default | sed 's/^export //;/^#/d;s/^#.*//' | tr -d '"' >> $GITHUB_ENV

      - name: localenv_docker - setup
        run: |
          pwd
          rm -f "${COLLECTION_INTEGRATION_PATH}/integration_config.yml"
          ./setup.sh
        working-directory: ${{ env.COLLECTION_INTEGRATION_TARGETS }}/setup_localenv_docker

      - name: localenv_docker - Run integration test (in docker)
        run: |
          ansible-test integration -v --color --retry-on-error --continue-on-error --python ${{ matrix.python }} --docker ${{ matrix.test_container }} --coverage --docker-network hashi_vault_default
        working-directory: ${{ env.COLLECTION_PATH }}

        # Run the integration tests
      - name: Run legacy integration tests (in docker)
        run: |
          docker ps || true
          ansible-test integration -v --color --retry-on-error --continue-on-error --python ${{ matrix.python }} --docker ${{ matrix.test_container }} --coverage
        working-directory: ${{ env.COLLECTION_PATH }}

        # ansible-test support producing code coverage date
      - name: Generate coverage report
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
        working-directory: ${{ env.COLLECTION_PATH }}

      # See the reports at https://codecov.io/gh/ansible-collections/community.hashi_vault
      - uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: false
