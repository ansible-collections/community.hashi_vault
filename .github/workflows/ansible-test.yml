# README FIRST
# 1. If you don't have unit tests remove that section
# 2. If your collection depends on other collections ensure they are installed, see "Install collection dependencies"
# If you need help please ask in #ansible-devel on Freenode IRC

name: CI
on:
  # Run CI against all pushes (direct commits, also merged PRs), Pull Requests
  push:
  pull_request:
  # Uncomment the following two lines to run CI once per day (at 06:00 UTC)
  # schedule:
  #   - cron: '0 6 * * *'
env:
  NAMESPACE: community
  COLLECTION_NAME: hashi_vault
  ANSIBLE_FORCE_COLOR: true

jobs:

###
# Sanity tests (REQUIRED)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_sanity.html

  sanity:
    name: Sanity (Ⓐ${{ matrix.ansible }})
    strategy:
      matrix:
        ansible:
          - stable-2.9
          - stable-2.10
          - devel
    runs-on: ubuntu-latest
    steps:

      # ansible-test requires the collection to be in a directory in the form
      # .../ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}/

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          # it is just required to run that once as "ansible-test sanity" in the docker image
          # will run on all python versions it supports.
          python-version: 3.8

      # Install the head of the given branch (devel, stable-2.10)
      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      # run ansible-test sanity inside of Docker.
      # The docker container has all the pinned dependencies that are required
      # and all python versions ansible supports.
      - name: Run sanity tests
        run: ansible-test sanity --docker -v --color
        working-directory: ./ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

###
# Integration tests (RECOMMENDED)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_integration.html


# If the application you are testing is available as a docker container and you want to test
# multiple versions see the following for an example:
# https://github.com/ansible-collections/community.zabbix/tree/master/.github/workflows

  integration:
    runs-on: ubuntu-latest
    name: I (Ⓐ${{ matrix.ansible }}+py${{ matrix.python }} | Vault ${{ matrix.vault }})
    strategy:
      fail-fast: false
      matrix:
        ansible:
          - stable-2.9
          - stable-2.10
          - devel
        python:
          - 2.7
          - 3.5
          - 3.6
          - 3.7
          - 3.8
          - 3.9
        vault:
          - 1.6.0
          - 1.5.5
          - 1.4.7
        exclude:
          - ansible: stable-2.9
            python: 3.9

    steps:
      - name: Initialize env vars
        run: |
          COLLECTION_PATH=ansible_collections/${NAMESPACE}/${COLLECTION_NAME}
          LOOKUP_HASHI_VAULT_PATH=${COLLECTION_PATH}/tests/integration/targets/lookup_hashi_vault
          LOOKUP_HASHI_VAULT_BIN=${LOOKUP_HASHI_VAULT_PATH}/lookup_hashi_vault/files/bin
          LOOKUP_HASHI_VAULT_VARS=${LOOKUP_HASHI_VAULT_PATH}/lookup_hashi_vault/vars

          echo "COLLECTION_PATH=${COLLECTION_PATH}" >> ${GITHUB_ENV}
          echo "LOOKUP_HASHI_VAULT_PATH=${LOOKUP_HASHI_VAULT_PATH}" >> ${GITHUB_ENV}
          echo "LOOKUP_HASHI_VAULT_BIN=${LOOKUP_HASHI_VAULT_BIN}" >> ${GITHUB_ENV}
          echo "LOOKUP_HASHI_VAULT_VARS=${LOOKUP_HASHI_VAULT_VARS}" >> ${GITHUB_ENV}

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ${{ env.COLLECTION_PATH }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Cache for vault binaries
        id: cache-vault
        uses: actions/cache@v2
        with:
          path: ${{ env.LOOKUP_HASHI_VAULT_BIN }}
          key: ${{ runner.os }}-vault${{ matrix.vault }} # future: include version/arch when configurable

      # removing .gitignore lets the files in those dirs be sent to the container via ansible-test
      # the files/bin dir will contain the vault binary downloaded a few steps later (or retrieved from cache)
      # the vars/ dir will be used to write a file overriding role defaults (for Vault version)
      - name: Prepare for Vault version and caching
        run: |
          rm -f "${LOOKUP_HASHI_VAULT_BIN}/.gitignore"
          rm -f "${LOOKUP_HASHI_VAULT_VARS}/.gitignore"
          echo '{ "vault_version": "${{ matrix.vault }}" }' > "${LOOKUP_HASHI_VAULT_VARS}/main.json"

      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      #TODO: remove dependency on community.crypto
      - name: Find the latest version of community.crypto
        run: |
          # credit to https://gist.github.com/lukechilds/a83e1d7127b78fef38c2914c4ececc3c#gistcomment-3294173

          cclu=$(curl -fs -o/dev/null -w %{redirect_url} https://github.com/ansible-collections/community.crypto/releases/latest)
          echo "CC_LATEST=$(basename ${cclu})" >> $GITHUB_ENV

      - name: Cache for community.crypto
        id: cache-cc
        uses: actions/cache@v2
        with:
          path: ansible_collections/community/crypto
          key: collection-community.crypto-${{ env.CC_LATEST }}

      - name: Install collection dependencies
        if: steps.cache-cc.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: ansible-collections/community.crypto
          ref: refs/tags/${{ env.CC_LATEST }}
          path: ansible_collections/community/crypto

      # this will populate files/bin with the selected vault version binary
      - name: Pre-download Vault
        if: steps.cache-vault.outputs.cache-hit != 'true'
        env:
          ANSIBLE_ROLES_PATH: ../
        working-directory: ${{ env.LOOKUP_HASHI_VAULT_PATH }}/playbooks
        run: ansible-playbook "download_vault.yml" -v

      # Run the integration tests
      - name: Run integration test
        run: ansible-test integration -v --color --retry-on-error --continue-on-error --diff --python ${{ matrix.python }} --docker --coverage
        working-directory: ${{ env.COLLECTION_PATH }}

        # ansible-test support producing code coverage date
      - name: Generate coverage report
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
        working-directory: ${{ env.COLLECTION_PATH }}

      # See the reports at https://codecov.io/gh/GITHUBORG/REPONAME
      - uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: false
