name: CI
on:
  # Run CI against all pushes (direct commits, also merged PRs), Pull Requests
  push:
    paths-ignore:
      - 'docs/**'
  pull_request:
    paths-ignore:
      - 'docs/**'
  schedule:
    - cron: '0 14 * * *'
env:
  NAMESPACE: community
  COLLECTION_NAME: hashi_vault
  ANSIBLE_FORCE_COLOR: true
  ANSIBLE_COLLECTIONS_PATHS: ${{ github.workspace }}

jobs:

###
# Sanity tests (REQUIRED)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_sanity.html

  sanity:
    name: Sanity (Ⓐ${{ matrix.ansible }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner:
          - ubuntu-latest
        test_container:
          - default
        ansible:
          - stable-2.9
          - stable-2.10
          - stable-2.11
          - devel
    steps:

      # ansible-test requires the collection to be in a directory in the form
      # .../ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}/

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          # it is just required to run that once as "ansible-test sanity" in the docker image
          # will run on all python versions it supports.
          python-version: 3.8

      # Install the head of the given branch (devel, stable-2.10)
      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      # run ansible-test sanity inside of Docker.
      # The docker container has all the pinned dependencies that are required
      # and all python versions ansible supports.
      - name: Run sanity tests
        run: ansible-test sanity --docker ${{ matrix.test_container }} -v --color
        working-directory: ./ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

  units:
    runs-on: ${{ matrix.runner }}
    name: Units (Ⓐ${{ matrix.ansible }})
    strategy:
      # As soon as the first unit test fails, cancel the others to free up the CI queue
      fail-fast: true
      matrix:
        runner:
          - ubuntu-latest
        test_container:
          - default
        ansible:
          - stable-2.9
          - stable-2.10
          - stable-2.11
          - devel

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          # it is just required to run that once as "ansible-test units" in the docker image
          # will run on all python versions it supports.
          python-version: 3.8

      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      # Run the unit tests
      - name: Run unit test
        run: ansible-test units -v --color --docker ${{ matrix.test_container }} --coverage
        working-directory: ./ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

        # ansible-test support producing code coverage date
      - name: Generate coverage report
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
        working-directory: ./ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

      # See the reports at https://codecov.io/gh/ansible-collections/community.hashi_vault
      - uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: false

###
# Integration tests (RECOMMENDED)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_integration.html

  integration:
    runs-on: ${{ matrix.runner }}
    name: I (Ⓐ${{ matrix.ansible }}+py${{ matrix.python }} | Vault ${{ matrix.vault }})
    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-latest
        test_container:
          - default
        ansible:
          - stable-2.9
          - stable-2.10
          - stable-2.11
          - devel
        python:
          - 2.7
          - 3.5
          - 3.6
          - 3.7
          - 3.8
          - 3.9
        vault:
          - 1.7.3
          - 1.6.5
        exclude:
          - ansible: stable-2.9
            python: 3.9
        include:
          - ansible: devel
            vault: 1.7.3
            python: '3.10'
            runner: ubuntu-latest
            test_container: default

    steps:
      - name: Initialize env vars
        uses: briantist/ezenv@v1
        with:
          env: |
            COLLECTION_PATH=ansible_collections/${NAMESPACE}/${COLLECTION_NAME}
            COLLECTION_INTEGRATION_PATH=${COLLECTION_PATH}/tests/integration
            COLLECTION_INTEGRATION_TARGETS=${COLLECTION_INTEGRATION_PATH}/targets
            LOOKUP_HASHI_VAULT_PATH=${COLLECTION_INTEGRATION_TARGETS}/lookup_hashi_vault
            LOOKUP_HASHI_VAULT_BIN=${LOOKUP_HASHI_VAULT_PATH}/lookup_hashi_vault/files/bin
            LOOKUP_HASHI_VAULT_VARS=${LOOKUP_HASHI_VAULT_PATH}/lookup_hashi_vault/vars

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ${{ env.COLLECTION_PATH }}

      - name: Link to .github  # easier access to local actions
        run: ln -s "${COLLECTION_PATH}/.github" .github

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      - name: Prepare docker dependencies
        run: ./setup.sh -e vault_version=${{ matrix.vault }}
        working-directory: ${{ env.COLLECTION_INTEGRATION_TARGETS }}/setup_localenv_gha

      - name: Run integration test
        run: |
          ansible-test integration -v --color --retry-on-error --continue-on-error --python ${{ matrix.python }} --docker ${{ matrix.test_container }} --coverage --docker-network hashi_vault_default
        working-directory: ${{ env.COLLECTION_PATH }}

        # ansible-test support producing code coverage date
      - name: Generate coverage report
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
        working-directory: ${{ env.COLLECTION_PATH }}

      # See the reports at https://codecov.io/gh/ansible-collections/community.hashi_vault
      - uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: false

  local_test_invocation:
    runs-on: ${{ matrix.runner }}
    name: LI - ${{ matrix.runner }} [${{ matrix.docker && '+' || '-' }}d4r] (Ⓐ${{ matrix.ansible }}+py${{ matrix.python }})
    env:
      # needed to prevent Ansible crashing on MacOS
      OBJC_DISABLE_INITIALIZE_FORK_SAFETY: 'YES'
    strategy:
      fail-fast: false
      matrix:
        ansible:
          - stable-2.11
        python:
          - 3.8
        runner:
          - ubuntu-latest
          - macos-latest
        test_container:
          - default
        docker:
          - true
          - false
        exclude:
          - runner: ubuntu-latest
            docker: false

    steps:
      - name: Initialize env vars
        uses: briantist/ezenv@v1
        with:
          env: |
            COLLECTION_PATH=ansible_collections/${NAMESPACE}/${COLLECTION_NAME}
            COLLECTION_INTEGRATION_PATH=${COLLECTION_PATH}/tests/integration
            COLLECTION_INTEGRATION_TARGETS=${COLLECTION_INTEGRATION_PATH}/targets
            LOOKUP_HASHI_VAULT_PATH=${COLLECTION_INTEGRATION_TARGETS}/lookup_hashi_vault
            LOOKUP_HASHI_VAULT_BIN=${LOOKUP_HASHI_VAULT_PATH}/lookup_hashi_vault/files/bin
            LOOKUP_HASHI_VAULT_VARS=${LOOKUP_HASHI_VAULT_PATH}/lookup_hashi_vault/vars

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ${{ env.COLLECTION_PATH }}

      - name: Link to .github  # easier access to local actions
        run: ln -s "${COLLECTION_PATH}/.github" .github

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      - name: Install community.crypto
        uses: ./.github/actions/collection-via-git
        with:
          collection: community.crypto

      - name: Install community.docker
        uses: ./.github/actions/collection-via-git
        with:
          collection: community.docker

      - name: Install community.general
        uses: ./.github/actions/collection-via-git
        if: ${{ matrix.runner == 'macos-latest' }}  # we need community.general.homebrew
        with:
          collection: community.general

      - name: legacy integration - use sample integration_config
        working-directory: ${{ env.COLLECTION_INTEGRATION_PATH }}
        run: cp "integration_config.yml.sample" "integration_config.yml"

      - name: legacy integration - venv
        if: ${{ matrix.runner != 'macos-latest' || !matrix.docker }}
        run: ansible-test integration -v --color --retry-on-error --continue-on-error --python ${{ matrix.python }} --venv --requirements --allow-destructive #--coverage
        working-directory: ${{ env.COLLECTION_PATH }}

      - name: Install Docker on MacOS
        if: ${{ matrix.runner == 'macos-latest' && matrix.docker }}
        uses: ./.github/actions/macos-docker

      - name: legacy integration - docker
        if: ${{ matrix.docker }}
        run: |
          ansible-test integration -v --color --retry-on-error --continue-on-error --python ${{ matrix.python }} --docker ${{ matrix.test_container }} --coverage
        working-directory: ${{ env.COLLECTION_PATH }}

      - name: legacy integration - remove integration_config
        if: ${{ matrix.docker }}
        working-directory: ${{ env.COLLECTION_INTEGRATION_PATH }}
        run: rm -f "integration_config.yml"

      - name: localenv_docker - setup
        if: ${{ matrix.docker }}
        run: |
          pwd
          pip install -r files/requirements/requirements.txt -c files/requirements/constraints.txt
          ./setup.sh
        working-directory: ${{ env.COLLECTION_INTEGRATION_TARGETS }}/setup_localenv_docker

      - name: localenv_docker - Run integration test (in docker)
        if: ${{ matrix.docker }}
        run: |
          ansible-test integration -v --color --retry-on-error --continue-on-error --python ${{ matrix.python }} --docker ${{ matrix.test_container }} --coverage --docker-network hashi_vault_default
        working-directory: ${{ env.COLLECTION_PATH }}

        # ansible-test support producing code coverage date
      - name: Generate coverage report
        if: ${{ matrix.docker }}
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
        working-directory: ${{ env.COLLECTION_PATH }}

      # See the reports at https://codecov.io/gh/ansible-collections/community.hashi_vault
      - uses: codecov/codecov-action@v2
        if: ${{ matrix.docker }}
        with:
          fail_ci_if_error: false
